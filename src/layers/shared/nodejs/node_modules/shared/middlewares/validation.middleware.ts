import middy from '@middy/core'
import { StatusCodes } from 'http-status-codes'
import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda'
import { plainToInstance } from 'class-transformer'
import { validate, ValidationError } from 'class-validator'

import { render } from 'shared/utils/custom-response'
import { APIGatewayEventInterface } from 'shared/interfaces'

export const validationMiddleware = (
  type: any,
  skipMissingProperties = false,
  whitelist = true,
  forbidNonWhitelisted = true,
): middy.MiddlewareObj<APIGatewayProxyEvent, APIGatewayProxyResult> => {
  const before: middy.MiddlewareFn<APIGatewayEventInterface, APIGatewayProxyResult> = async (
    request
  ): Promise<any> => {
    const data = JSON.parse(request.event.body || '')
    const errors: ValidationError[] = await validate(
      plainToInstance(type, data),
      {
        skipMissingProperties,
        whitelist,
        forbidNonWhitelisted,
      },
    );
    if (errors.length > 0) {
      const message = errors
        .map((error: ValidationError) => Object.values(error.constraints || ''))
        .join(', ');
      return render(StatusCodes.BAD_REQUEST, { message }, {})
    } else {
      request.event.jsonBody = plainToInstance(type, data)
    }
  }

  const after: middy.MiddlewareFn<APIGatewayProxyEvent, APIGatewayProxyResult> = async (
    request
  ): Promise<void> => {
  }

  return {
    before,
    after
  }
}

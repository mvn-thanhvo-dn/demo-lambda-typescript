import middy from '@middy/core'
import { StatusCodes } from 'http-status-codes'
import { APIGatewayProxyResult } from 'aws-lambda'
import { TokenExpiredError, JsonWebTokenError } from 'jsonwebtoken';

import { render } from 'shared/utils/custom-response';
import { getToken, verifyToken } from 'shared/utils/jwt'
import { APIGatewayEventInterface, SignToken } from 'shared/interfaces'

export const authMiddleware = (): middy.MiddlewareObj<APIGatewayEventInterface, APIGatewayProxyResult> => {
  const before: middy.MiddlewareFn<APIGatewayEventInterface, APIGatewayProxyResult> = async (
    request
  ): Promise<any> => {
    try {
      request.event.currentUser = verifyToken(getToken(request.event)) as SignToken
    } catch (err: unknown) {
      console.log(err)
      if (err instanceof TokenExpiredError || err instanceof JsonWebTokenError) {
        return render(StatusCodes.UNAUTHORIZED, { message: err.message }, {})
      } else {
        return render(
          StatusCodes.INTERNAL_SERVER_ERROR, 
          { message: err instanceof Error ? err.message : 'some error happened' },
          {}
        )
      }
    }
  }

  const after: middy.MiddlewareFn<APIGatewayEventInterface, APIGatewayProxyResult> = async (
    request
  ): Promise<void> => {
  }

  return {
    before,
    after
  }
}
